import EventEmitter from "@scena/event-emitter";
import { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents } from "./types";
declare class InfiniteViewer extends EventEmitter<InfiniteViewerEvents> {
    private containerElement;
    private viewportElement;
    options: InfiniteViewerOptions;
    private injectResult;
    private wrapperElement;
    private scrollAreaElement;
    private horizontalScrollbar;
    private verticalScrollbar;
    private gesto;
    private offsetX;
    private offsetY;
    private containerWidth;
    private containerHeight;
    private viewportWidth;
    private viewportHeight;
    private scrollLeft;
    private scrollTop;
    private timer;
    private dragFlag;
    private isLoop;
    private _tempScale;
    private _tempRect;
    private _tempRectTimer;
    private _onDestroys;
    /**
     * @sort 1
     */
    constructor(containerElement: HTMLElement, viewportElement: HTMLElement, options?: Partial<InfiniteViewerOptions>);
    /**
     * Get Container Element
     */
    getContainer(): HTMLElement;
    /**
     * Get Viewport Element
     */
    getViewport(): HTMLElement;
    /**
     * Get Wrapper Element
     */
    getWrapper(): HTMLElement;
    /**
     * Get Scroll Area Element
     */
    geScrollArea(): HTMLElement;
    /**
     * Destroy elements, properties, and events.
     */
    destroy(): void;
    /**
     * Gets the number of pixels that an element's content is scrolled vertically.
     * @param - Get absolute top position
     */
    getScrollTop(isAbsolute?: boolean): number;
    /**
     * Gets the number of pixels that an element's content is scrolled vertically.
     * @param - Get absolute left position
     */
    getScrollLeft(isAbsolute?: boolean): number;
    /**
     * Gets measurement of the width of an element's content with overflow
     */
    getScrollWidth(isZoom?: boolean): number;
    /**
     * Gets measurement of the height of an element's content with overflow
     */
    getScrollHeight(isZoom?: boolean): number;
    /**
     * Scroll the element to the center
     */
    scrollCenter(): boolean;
    /**
     * Update Viewer Sizes
     * @method
     */
    resize: () => void;
    /**
     * Scrolls the container by the given amount.
     */
    scrollBy(deltaX: number, deltaY: number): boolean;
    /**
     * Scrolls the container to set of coordinates.
     * @param scrollLeft
     * @param scrollTop
     */
    scrollTo(x: number, y: number): boolean;
    /**
     * Set viewer zoom
     */
    setZoom(zoom: number, isSetter?: boolean): void;
    /**
     * get x ranges
     */
    getRangeX(isZoom?: boolean, isReal?: boolean): number[];
    /**
     * get y ranges
     */
    getRangeY(isZoom?: boolean, isReal?: boolean): number[];
    private init;
    private render;
    private renderScroll;
    private move;
    private onScroll;
    private onWheel;
    private onGestureStart;
    private onGestureChange;
    private onGestureEnd;
    private startAnimation;
    private pauseAnimation;
    private getScrollAreaWidth;
    private getScrollAreaHeight;
    private _triggerPinch;
    private _setClientRect;
    private _zoomByClient;
}
interface InfiniteViewer extends InfiniteViewerProperties {
}
export default InfiniteViewer;
