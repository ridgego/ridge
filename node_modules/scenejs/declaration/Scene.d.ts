import Animator from "./Animator";
import SceneItem from "./SceneItem";
import { IObject } from "@daybrush/utils";
import { SceneState, SceneOptions, EasingType, AnimatorState, SceneItemOptions, PlayCondition, NameType, SceneEvents } from "./types";
import Frame from "./Frame";
import OrderMap from "order-map";
import { InjectResult, StyledInjector } from "css-styled";
declare class Scene extends Animator<SceneOptions, SceneState, SceneEvents> {
    static VERSION: string;
    items: IObject<Scene | SceneItem>;
    orderMap: OrderMap<string | number>;
    styled: StyledInjector;
    styledInjector: InjectResult;
    temp: IObject<Frame>;
    constructor(properties?: {
        options?: Partial<SceneOptions>;
    } & IObject<any>, options?: Partial<SceneOptions>);
    getDuration(): number;
    setDuration(duration: number): this;
    getItem<T extends (Scene | SceneItem) = Scene | SceneItem>(name: number | string): T;
    newItem(name: number | string, options?: Partial<SceneItemOptions>): Scene | SceneItem;
    removeItem(name: number | string): this;
    setItem(name: number | string, item: Scene | SceneItem): this;
    getCurrentFrames(needUpdate?: boolean, parentEasing?: EasingType): IObject<any>;
    getCurrentFlattedFrames(needUpdate?: boolean, parentEasing?: EasingType): Record<string, Frame>;
    setTime(time: number | string, isTick?: boolean, isParent?: boolean, parentEasing?: EasingType): this;
    forEach(func: (item: Scene | SceneItem, id: string | number, index: number, items: IObject<Scene | SceneItem>) => void): this;
    toCSS(playCondition?: PlayCondition, duration?: number, parentStates?: AnimatorState[]): string;
    exportCSS(playCondition?: PlayCondition, duration?: number, parentStates?: AnimatorState[]): this;
    append(item: SceneItem | Scene): void;
    pauseCSS(): this;
    pause(): this;
    endCSS(): void;
    end(): this;
    getOrders(): NameType[];
    setOrders(orders: NameType[]): NameType[];
    getAnimationElement(): HTMLElement | SVGElement;
    addPlayClass(isPaused: boolean, playClassName?: string, properties?: object): HTMLElement | SVGElement;
    playCSS(isExportCSS?: boolean, playClassName?: string, properties?: Partial<AnimatorState>): this;
    set(properties: any, ...args: any[]): this;
    clear(): void;
    load(properties?: any, options?: any): this;
    setOptions(options?: Partial<SceneState>): this;
    setSelector(target?: string | boolean | ((id: number | string) => string)): this;
    start(delay?: number): boolean;
}
export default Scene;
